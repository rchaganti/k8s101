apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: voteapplication
spec:
  schema:
    apiVersion: v1alpha1
    kind: VoteApplication
    spec:
      name: string
      redis:
        name: string | default="redis" 
        svcName: string | default="redis"
        imageName: string | default="redis:alpine"
        port: integer | default=6379
      db:
        name: string | default="db"
        svcName: string | default="db"
        imageName: string | default="postgres:15-alpine"
        userName: string | default="postgres"
        password: string | default="postgres"
        port: integer | default=5432
      worker:
        name: string | default="worker"
        imageName: string | default="dockersamples/examplevotingapp_worker"
      vote:
        name: string | default="vote"
        imageName: string | default="dockersamples/examplevotingapp_vote"
        port: integer | default=80
        nodePort: integer | default=31000
        svcName: string | default="vote"
      result:
        name: string | default="result"
        imageName: string | default="dockersamples/examplevotingapp_result"
        port: integer | default=80
        nodePort: integer | default=31001
        svcName: string | default="result"
    status: {}
  resources:
    - id: redisDeployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.redis.name}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.redis.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.redis.name}
            spec:
              containers:
              - name: ${schema.spec.redis.name}
                image: ${schema.spec.redis.imageName}
                ports:
                  - containerPort: ${schema.spec.redis.port}
    - id: redisService
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.redis.svcName}
        spec:
          selector: ${redisDeployment.spec.selector.matchLabels}
          ports:
            - protocol: TCP
              port: ${schema.spec.redis.port}
              targetPort: ${schema.spec.redis.port}
    - id: dbDeployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.db.name}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.db.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.db.name}
            spec:
              containers:
              - name: ${schema.spec.db.name}
                image: ${schema.spec.db.imageName}
                env:
                - name: POSTGRES_USER
                  value: ${schema.spec.db.userName}
                - name: POSTGRES_PASSWORD
                  value: ${schema.spec.db.password}
                ports:
                  - containerPort: ${schema.spec.db.port}
    - id: dbService
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.db.svcName}
        spec:
          selector: ${dbDeployment.spec.selector.matchLabels}
          ports:
            - protocol: TCP
              port: ${schema.spec.db.port}
              targetPort: ${schema.spec.db.port}              
    - id: workerDeployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.worker.name}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.worker.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.worker.name}
            spec:
              containers:
              - name: ${schema.spec.worker.name}
                image: ${schema.spec.worker.imageName}
    - id: voteDeployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.vote.name}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.vote.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.vote.name}
            spec:
              containers:
              - name: ${schema.spec.vote.name}
                image: ${schema.spec.vote.imageName}
    - id: voteService
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.vote.svcName}
        spec:
          type: NodePort
          selector: ${voteDeployment.spec.selector.matchLabels}
          ports:
            - protocol: TCP
              port: ${schema.spec.vote.port}
              targetPort: ${schema.spec.vote.port}
              nodePort: ${schema.spec.vote.nodePort}
    - id: resultDeployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.result.name}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.result.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.result.name}
            spec:
              containers:
              - name: ${schema.spec.result.name}
                image: ${schema.spec.result.imageName}
    - id: resultService
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.result.svcName}
        spec:
          type: NodePort
          selector: ${resultDeployment.spec.selector.matchLabels}
          ports:
            - protocol: TCP
              port: ${schema.spec.result.port}
              targetPort: ${schema.spec.result.port}
              nodePort: ${schema.spec.result.nodePort}